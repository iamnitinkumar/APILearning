swagger: "2.0"
info:
  description: "This is a sample swagger file for an ecommerce site with a small subset of APIs"
  version: "1.0.0"
  title: "E-commerce Swagger"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "nitin.k@srijan.net"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:3000"
basePath: "/v2"
tags:
- name: "ecom"
  description: "Subset of Ecommerce APIs"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /login:
    post:
      tags:
      - "login"
      summary: "Login to the application"
      description: ""
      operationId: "loginUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Login parameters"
        required: true
        schema:
          $ref: "#/definitions/login"
      responses:
        "200":
          description: "Successful Login"
        "401":
          $ref: '#/responses/UnauthenticatedError'
        "403":
          $ref: '#/responses/UnauthorizedError'
        "405":
          description: "Method not allowed"
        "503":
          $ref: '#/responses/InternalServerError'
      security:
      - basicAuth: []
  /register:
    post:
      tags:
      - "register"
      summary: "Create user"
      description: "This end point is to register a user"
      operationId: "registerUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/Register"
      responses:
        "201":
          description: "User created successfully"        
        "400":
          description: "Bad request"
        "405":
          description: "Method not allowed"
        "503":
          $ref: '#/responses/InternalServerError'
  /user:
    get:
      tags:
      - "user"
      summary: "Get the details of the users registered in the system"
      description: "This can be done only by an authenticated user"
      operationId: "user"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Register"
        "401":
          $ref: '#/responses/UnauthenticatedError'
        "403":
          $ref: '#/responses/UnauthorizedError'
        "503":
          $ref: '#/responses/InternalServerError'
      security:
        - basicAuth: []
  /orders:
    get:
      tags:
      - "orders"
      summary: "Get the order details"
      description: "This can be done only by an authenticated user"
      operationId: "orders"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/order"
        "204":
          description: "No Content"
        "401":
          $ref: '#/responses/UnauthenticatedError'
        "403":
          $ref: '#/responses/UnauthorizedError'
        "503":
          $ref: '#/responses/InternalServerError'
      security:
        - basicAuth: []
  /wishlist:
    post:
      tags:
      - "wishlist"
      summary: "Create a wishlist"
      description: "This can be done only by an authenticated user"
      operationId: "wishlist"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Wishlist items"
        required: true
        schema:
          $ref: "#/definitions/wishlist"
      responses:
        "201":
          description: "Item successfully added"
        "401":
          $ref: '#/responses/UnauthenticatedError'
        "403":
          $ref: '#/responses/UnauthorizedError'
        "405":
          description: "Method not allowed"
        "503":
          $ref: '#/responses/InternalServerError'
      security:
      - basicAuth: []
securityDefinitions:
  basicAuth:
    type: basic
definitions:
  login:
    type: "object"
    properties:
      username:
        type: "string"
        description: "username - the email used to register"
      password:
        type: "string"
        description: "Password set during registration"
    xml:
      name: "login"
  Register:
    type: "object"
    properties:
      firstName:
        type: "string"
        description: "First name"
      lastName:
        type: "string"
        description: "Last name"
      email:
        type: "string"
        description: "Valid email address"
      password:
        type: "string"
        description: "Password - minimum 8 characters"
      phone:
        type: "string"
        description: "Mobile number"
    xml:
      name: "User"
  order:
    type: "object"
    properties:
      itemid:
        type: "integer"
        format: "int64"
      itemname:
        type: "string"
      quantity:
        type: "string"
    xml:
      name: "Order"
  wishlist:
    type: "object"
    properties:
      itemname:
        type: "string"
        description: "Can be any item like shoes etc"
    xml:
      name: "wishlist"
responses:
  UnauthorizedError:
    description: User is not authorised to make the request
    headers:
      WWW_Authenticate:
        type: string
  UnauthenticatedError:
    description: Authentication information is missing or invalid
    headers:
      WWW_Authenticate:
        type: string
  InternalServerError:
    description: Service not available
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"